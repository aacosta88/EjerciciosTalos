package com.talos.invertedindex;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.talos.invertedindex.datastructure.DataIndex;
import com.talos.invertedindex.datastructure.Index;

public class PhraseSearch {
	
	public String[] search(String phrase, Map<String, List<Index>> fullInvertedIndex, String[] documentList) throws Exception{
		if (phrase != null && !phrase.trim().equals("")){
			List<DataIndex> sortDataIndex = sortInvertedIndex(fullInvertedIndex, phrase);
			for (int i=0; i<sortDataIndex.size(); i++){
				List<Index> indexList = sortDataIndex.get(i).getIndexList();
				for (int j=0; j<indexList.size(); j++){
					Index index = indexList.get(j);
				}
				
			}
		}else {
			throw new Exception("The phrase can't be empty");
		}
		return new String[3];
	}
	
	private boolean isThereConsecutive(List<DataIndex> sortDataIndex, Index currentIndex, int pointer){
		boolean isThereConsecutive = false;
		for (int i=pointer+1; i<sortDataIndex.size()+1; i++){
			List<Index> indexList = sortDataIndex.get(i).getIndexList();
			for (Index index : indexList){
				if (currentIndex.getIdDocument() == index.getIdDocument() && 
					currentIndex.getWordLocation()+1 == index.getWordLocation()){
					isThereConsecutive = true;
				}
			}
		}
		return isThereConsecutive;
	}
	
	private List<DataIndex> sortInvertedIndex(Map<String, List<Index>> fullInvertedIndex, String phrase){
		List<DataIndex> sortDataIndex = new ArrayList<DataIndex>();
		for (String word : phrase.split(" ")){
			List<Index> listIndex = fullInvertedIndex.get(word);
			if (listIndex != null){
				DataIndex dataIndex = new DataIndex(word, listIndex);
				sortDataIndex.add(dataIndex);
			}
		}
		return sortDataIndex;
	}

}
